// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                         String @id @default(auto()) @map("_id") @db.ObjectId
  firstname                  String?
  lastname                   String?
  email                      String? @unique
  emailVerified              Boolean? @default(false)
  hashedPassword             String?
  accessToken                String?
  role                       String @default("user")
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  accounts                   Account[]
  company                    Company[]
  room                       Room[]
  reservation                Reservation[]

}


model Account {
  id                         String @id @default(auto()) @map("_id") @db.ObjectId
  userId                     String   @db.ObjectId
  type                       String
  provider                   String
  providerAccountId          String
  refresh_token              String?  @db.String
  access_token               String?  @db.String
  expires_at                 Int?
  role                       String @default("user")
  token_type                 String?
  scope                      String?
  id_token                   String?  @db.String
  session_state              String?
  user                       User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Company{
  id                        String @id @default(auto()) @map("_id") @db.ObjectId
  userId                    String @db.ObjectId 
  organisasjonsnummer       String? 
  firmanavn                 String @unique
  adresse                   String?
  postnummer                String?
  poststed                  String?
  fornavn                   String?
  etternavn                 String?
  epost                     String?
  reservation               Reservation[]
  user                      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  rooms                     Room[]

} 

model Room {
  id                        String @id @default(auto()) @map("_id") @db.ObjectId
  userId                    String @db.ObjectId
  companyId                 String @db.ObjectId
  name                      String    @unique  
  createdAt                 DateTime @default(now())
  companyName               String
  reservations              Reservation[]
  company                   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user                      User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Reservation {
  id                       String @id @default(auto()) @map("_id") @db.ObjectId  
  userId                   String @db.ObjectId
  roomId                   String @db.ObjectId
  companyId                String  @db.ObjectId
  roomName                 String? 
  companyName              String
  start_date               DateTime
  end_date                 DateTime
  createdAt                DateTime @default(now())
  duration                 String?
  text                     String?
  user                     User @relation(fields: [userId], references: [id], onDelete :Cascade)
  room                     Room @relation(fields: [roomId], references: [id], onDelete :Cascade)
  company                  Company @relation(fields: [companyId], references: [id], onDelete :Cascade)

  // Performance indexes for frequently queried fields
  @@index([userId, createdAt(sort: Desc)], name: "user_reservations_idx")
  @@index([companyName, createdAt(sort: Desc)], name: "company_reservations_idx")
  @@index([roomId, start_date, end_date], name: "room_time_conflict_idx")
  @@index([roomName, createdAt(sort: Desc)], name: "room_name_reservations_idx")
  @@index([start_date, end_date], name: "time_range_idx")
}

model Invitation {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  companyId                String?
  companyName              String?
  adminId                  String?
  adminName                String?
  adminEmail               String?
  userId                   String?
  userName                 String?
  userEmail                String?
  token                    String?   @unique
  createdAt                DateTime @default(now())
}

model InvitedUser {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  companyId                String?
  adminId                  String? 
  userId                   String? @unique
  firstname                String?
  lastname                 String?
  email                    String? 
  createdAt                DateTime @default(now())
  @@unique([email, companyId])

}
